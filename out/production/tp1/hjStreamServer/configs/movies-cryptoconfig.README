// Configuration file for the encrypted movies that must
// be streamed

// Reference for configuration parameters
// <filename>     : "String"
//  sequence of <key-value pairs>: String:String pairs
// </filename>    : "/String"
//
// Extended descriptive reference in each entry of this config file
//
// <moviename.dat.encrypted> : the movie content encrypted
// ciphersuite:definition // the ciphersuite def. of this encrypted movie
// key:hexadecimal-representation> // Key with valid keysize n
// iv: hexadecimal-representation  // iv, w/ the correct size
// integrity: integrity-control // Secure hash or HMAC definition
                                // for integrity check after decryption
// integrity-check: hexadecimal-rep-of-the-integrity-control-check
// mackey: hexadecimal-representation //Null if not required
// </moviename-dat.encrypted> // end of the definition for this movie

// EXAMPLES for two movies

<cars.dat.encrypted> 
ciphersuite: AES/CBC/PKCS5Padding
key:91342609ae5435f69a23652476e67abc
iv: 452456817612349899a3425617245613
integrity: SHA256
integrity-check: 9123496ab52311a4762a3efe110176233abff246ab52311a4762a3efe1101762
mackey: NULL
</cars.dat.encrypted>
 
<monsters.dat.encrypted> 
ciphersuite: RC6/CTR/NoPadding
key: 476e67a34e5571897612391bcce24512
iv: 8a451982e562c4877771565261abc1296
integrity: HMAC-SHA1
integrity-ckeck: 997612567254197629aa4512761691c156a19920
mackey: 6af53417a7f5e4321a65a31213048567
</monsters.dat.encrypted>

// Other possible ciphersuites for your tests and correct parameterizations

// ciphersuite: Blowfish/CBC/PKCS5Padding: can use w/ 64, 128, 256 or 448 bit keys
// ciphersuite: AES/GCM/NoPadding: can use w/ 128, 192 or 256 bit keys
// ciphersuite: DESede/CFB/NoPadding: can use w/ 112 or 168 bit keys
// ciphersuite: AES/OFB/NoPadding: can use w/ 128, 192 or 256 bit keys
// ciphersuite: RC4                  : ca use with any key size, ex 1024 bit keys
// ciphersuite: ChaCha20: 	     : cam use w/ a 256 bit key
// ciphersuite  DES/OFB/NoPadding    : can use w/ a 56 bit key .. Uhm Weak !
// ciphersuite  SALSA20    : can use w/ a 56 bit key .. Uhm Weak !
// etc ...

// For different Secure Hash Functions or HMAC key constructions can use also
// different parameterizations, ex:
// Try these Hash-ALgorithms you can test
// Some of them (can require Additional Crypto providers in you Java installation
// MD5    Uhm weak
// SHA1   Uhm probably weak ?
// SHA-224
// SHA-256
// SHA-512
// SHA-384
// SHA3-256
// KECCAK-384
// GOST
// RIPEMD256
// WHIRLPOOL
// BLAKE2B-384
// .... 
//
// HMAC key constructions you can test
// (as above, some can require additional cryptoproviders in your java installation
// HMacSHA1
// HMacSHA256
// HMacSHA224
// HMacSHA384
// HMacSHA512
// POLY1305CAST6
GOST3412MAC
HMAC-SHA3-512
SERPENT-GMAC
HMACRIPEMD256
HMACKECCAK512






